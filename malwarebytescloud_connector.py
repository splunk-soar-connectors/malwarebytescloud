#!/usr/bin/env python
"""Malwarebytes Cloud app for splunk>phantom

Malwarebytes protects people and businesses against dangerous threats such as malware, ransomware,
and exploits that escape detection by traditional antivirus solutions.
The product combines advanced heuristic threat detection with signature-less technologies to detect
and stop a cyber attack before damage occurs.
"""

# Phantom App imports
import phantom.app as phantom
from phantom.base_connector import BaseConnector
from phantom.action_result import ActionResult

# Usage of the consts file is recommended
# from malwarebytescloud_consts import *
import requests
import json
import time

from requests_oauthlib import OAuth2Session
from oauthlib.oauth2 import BackendApplicationClient

__author__ = "Lee Wei"
__copyright__ = "Copyright 2019, Malwarebytes"
__credits__ = ["Lee Wei"]
__license__ = "GPL"
__version__ = "1.1.0"
__maintainer__ = "Lee Wei"
__email__ = "lwei@malwarebytes.com"
__status__ = "Production"


class RetVal(tuple):
    def __new__(cls, val1, val2=None):
        return tuple.__new__(RetVal, (val1, val2))


class MalwarebytesCloudConnector(BaseConnector):

    def __init__(self):

        # Call the BaseConnectors init first
        super(MalwarebytesCloudConnector, self).__init__()

        self._state = None
        self._base_url = None
        self.HEADER = {"Content-Type": "application/json"}

    def NEBULA_URL(self, path):
        return "{NEBULA_URL}{PATH}".format(NEBULA_URL="https://cloud.malwarebytes.com", PATH=path)

    def _handle_test_connectivity(self, param):

        # Add an action result object to self (BaseConnector) to represent the action for this param
        action_result = self.add_action_result(ActionResult(dict(param)))

        # NOTE: test connectivity does _NOT_ take any parameters
        # i.e. the param dictionary passed to this handler will be empty.
        # Also typically it does not add any data into an action_result either.
        # The status and progress messages are more important.

        self.save_progress("Connecting to Malwarebytes Cloud")

        try:
            self.save_progress("Account ID: " + self.account_id)
            self.save_progress("Client ID: " + self.client_id)
            client = BackendApplicationClient(self.client_id, scope=self.client_scope)
            nebula = OAuth2Session(client=client, scope=self.client_scope)
            nebula.headers.update(self.HEADER)
            nebula.fetch_token(token_url=self._base_url + '/oauth2/token', client_secret=self.client_secret, scope=self.client_scope)
            self.save_progress("Login to Malwarebytes Cloud is successful")
        except Exception as err:
            action_result.set_status(phantom.APP_ERROR, "Error Connecting to Malwarebytes Cloud. Details: {0}".format(str(err)))
            return

        # Return success
        return action_result.set_status(phantom.APP_SUCCESS)

    def _handle_list_endpoints(self, param):

        self.save_progress("In action handler for: {0}".format(self.get_action_identifier()))

        # Add an action result object to self (BaseConnector) to represent the action for this param
        action_result = self.add_action_result(ActionResult(dict(param)))

        # make call to get endpoints
        try:
            more_data = True
            total_count = 0
            running_count = 0
            next_cursor = ''
            results = {'machines': []}
            machines = []
            ret_val, nebula = self._get_nebula_client(action_result)
            if phantom.is_fail(ret_val):
                return action_result.get_status()

            while (more_data):
                resp = nebula.get(self.NEBULA_URL('/api/v2/endpoints?next_cursor=' + next_cursor))
                data = json.loads(resp.text)

                rate_limit = int(resp.headers.get('x-rate-limit-remaining'))
                if (rate_limit < 10):
                    time.sleep(60)

                total_count = data.get('total_count')
                next_cursor = data.get('next_cursor')
                machines += data.get('machines')
                running_count += len(data.get('machines'))
                if total_count > running_count:
                    more_data = True
                else:
                    more_data = False

            self.save_progress("Total endpoints found: {0}".format(str(len(results['machines']))))
            # Add the response into the data section
            results = {'machines': machines}
            action_result.add_data(results)
        except Exception as err:
            return RetVal(action_result.set_status( phantom.APP_ERROR, "Error in list_endpoints. Details: {0}".format(str(err))))

        return action_result.set_status(phantom.APP_SUCCESS)

    def _handle_scan_remediate_endpoint(self, param):

        self.save_progress("In action handler for: {0}".format(self.get_action_identifier()))
        action_result = self.add_action_result(ActionResult(dict(param)))

        hostname = param["hostname"]
        ret_val, id = self._get_agent_id(hostname, action_result)
        if phantom.is_fail(ret_val):
            return action_result.get_status()
        self.save_progress("ID for host " + hostname + " - " + id)

        if (id == "0"):
            return action_result.set_status(phantom.APP_SUCCESS, "Endpoint not found")
        elif (id == "99"):
            return action_result.set_status(phantom.APP_SUCCESS, "More than one endpoint found")
        else:
            summary = action_result.update_summary({})
            summary["hostname"] = hostname
            summary["machine_id"] = id

        headers = self.HEADER
        headers.update({"content-type": "application/json; charset=UTF-8"})

        body = {
            "command": "command.threat.scan",
            "data": {"scan_settings": {"type": "ThreatScan", "remove": "true"}},
            "machine_ids": [id] }

        # scan and remediate endpoint
        try:
            ret_val, nebula = self._get_nebula_client(action_result)
            if phantom.is_fail(ret_val):
                return action_result.get_status()
            response = nebula.post(self.NEBULA_URL('/api/v2/jobs'), data=json.dumps(body), headers=headers)
            self.save_progress("response: {0}".format(response.text))
            action_result.add_data(response.text)
        except Exception as err:
            return RetVal(action_result.set_status( phantom.APP_ERROR, "Error in list_endpoints. Details: {0}".format(str(err))))

        return action_result.set_status(phantom.APP_SUCCESS)

    def _handle_scan_report_endpoint(self, param):

        self.save_progress("In action handler for: {0}".format(self.get_action_identifier()))
        action_result = self.add_action_result(ActionResult(dict(param)))

        hostname = param["hostname"]
        ret_val, id = self._get_agent_id(hostname, action_result)
        if phantom.is_fail(ret_val):
            return action_result.get_status()
        self.save_progress("ID for host " + hostname + " - " + id)

        if (id == "0"):
            return action_result.set_status(phantom.APP_SUCCESS, "Endpoint not found")
        elif (id == "99"):
            return action_result.set_status(phantom.APP_SUCCESS, "More than one endpoint found")
        else:
            summary = action_result.update_summary({})
            summary["hostname"] = hostname
            summary["machine_id"] = id

        headers = self.HEADER
        headers.update({"content-type": "application/json; charset=UTF-8"})

        body = {
            "command": "command.threat.scan",
            "data": {"scan_settings": {"type": "ThreatScan", "remove": "false"}},
            "machine_ids": [id] }

        # scan and remediate endpoint
        try:
            ret_val, nebula = self._get_nebula_client(action_result)
            if phantom.is_fail(ret_val):
                return action_result.get_status()
            response = nebula.post(self.NEBULA_URL('/api/v2/jobs'), data=json.dumps(body), headers=headers)
            self.save_progress("response: {0}".format(response.text))
            action_result.add_data(response.text)
        except Exception as err:
            return RetVal(action_result.set_status( phantom.APP_ERROR, "Error in list_endpoints. Details: {0}".format(str(err))))

        return action_result.set_status(phantom.APP_SUCCESS)

    def _handle_get_endpoint_info(self, param):

        self.save_progress("In action handler for: {0}".format(self.get_action_identifier()))
        action_result = self.add_action_result(ActionResult(dict(param)))

        hostname = param["hostname"]
        ret_val, id = self._get_agent_id(hostname, action_result)
        if phantom.is_fail(ret_val):
            return action_result.get_status()
        self.save_progress("ID for host " + hostname + " - " + id)

        if (id == "0"):
            return action_result.set_status(phantom.APP_SUCCESS, "Endpoint not found")
        elif (id == "99"):
            return action_result.set_status(phantom.APP_SUCCESS, "More than one endpoint found")
        else:
            summary = action_result.update_summary({})
            summary["hostname"] = hostname
            summary["machine_id"] = id

        # make call to get endpoint info
        try:
            ret_val, nebula = self._get_nebula_client(action_result)
            if phantom.is_fail(ret_val):
                return action_result.get_status()
            response = nebula.get(self.NEBULA_URL('/api/v2/endpoints/' + id))
            data = json.loads(response.text)
            self.save_progress("response: {0}".format(response.text))
        except Exception as err:
            return RetVal(action_result.set_status( phantom.APP_ERROR, "Error in get_endpoint_info. Details: {0}".format(str(err))))

        # Add the response into the data section
        action_result.add_data(data)
        return action_result.set_status(phantom.APP_SUCCESS)

    def _handle_get_scan_info(self, param):

        self.save_progress("In action handler for: {0}".format(self.get_action_identifier()))
        action_result = self.add_action_result(ActionResult(dict(param)))

        scan_id = param["scan_id"]
        self.save_progress("Requesting scan details for scan_id: " + scan_id)

        summary = action_result.update_summary({})
        summary["scan_id"] = scan_id

        # make call to get scan info
        try:
            ret_val, nebula = self._get_nebula_client(action_result)
            if phantom.is_fail(ret_val):
                return action_result.get_status()
            response = nebula.get(self.NEBULA_URL('/api/v2/scans/' + scan_id))
            data = json.loads(response.text)
            self.save_progress("response: {0}".format(response.text))
        except Exception as err:
            return RetVal(action_result.set_status( phantom.APP_ERROR, "Error in get_scan_info. Details: {0}".format(str(err))))

        # Add the response into the data section
        action_result.add_data(data)
        return action_result.set_status(phantom.APP_SUCCESS)

    def _get_agent_id(self, search_text, action_result):
        # First lookup the Agent ID
        try:
            ret_val, nebula = self._get_nebula_client(action_result)
            if phantom.is_fail(ret_val):
                return action_result.get_status(), None
            response = nebula.get(self.NEBULA_URL('/api/v2/endpoints?search_string=' + search_text))
            data = json.loads(response.text)
            self.save_progress("response: {0}".format(response.text))
        except Exception as err:
            return RetVal(action_result.set_status( phantom.APP_ERROR, "Error in _get_agent_id. Details: {0}".format(str(err))), None)

        endpoints_found = data.get("total_count")
        self.save_progress("Endpoints found: " + str(endpoints_found))
        # action_result.add_data(response)

        if (endpoints_found == 0):
            return phantom.APP_SUCCESS, "0"
        elif (endpoints_found > 1):
            return phantom.APP_SUCCESS, "99"
        elif data.get('machines') and data.get('machines')[0].get('id'):
            return phantom.APP_SUCCESS, data.get('machines')[0].get('id')
        else:
            return RetVal(action_result.set_status( phantom.APP_ERROR, "Error while getting the agent ID"), None)

    def _get_nebula_client(self, action_result):
        try:
            client = BackendApplicationClient(self.client_id, scope=self.client_scope)
            nebula = OAuth2Session(client=client, scope=self.client_scope)
            nebula.headers.update(self.HEADER)
            nebula.fetch_token(token_url=self._base_url + '/oauth2/token', client_secret=self.client_secret, scope=self.client_scope)
            return (phantom.APP_SUCCESS, nebula)
        except Exception as err:
            return RetVal(action_result.set_status(phantom.APP_ERROR, "Error Connecting to Malwarebytes Cloud. Details: {0}".format(str(err))), None)

    def handle_action(self, param):

        ret_val = phantom.APP_SUCCESS

        # Get the action that we are supposed to execute for this App Run
        action_id = self.get_action_identifier()

        self.debug_print("action_id", self.get_action_identifier())

        if action_id == 'test_connectivity':
            ret_val = self._handle_test_connectivity(param)

        elif action_id == 'list_endpoints':
            ret_val = self._handle_list_endpoints(param)

        elif action_id == 'scan_remediate_endpoint':
            ret_val = self._handle_scan_remediate_endpoint(param)

        elif action_id == 'scan_report_endpoint':
            ret_val = self._handle_scan_report_endpoint(param)

        elif action_id == 'get_endpoint_info':
            ret_val = self._handle_get_endpoint_info(param)

        elif action_id == 'get_scan_info':
            ret_val = self._handle_get_scan_info(param)

        return ret_val

    def initialize(self):

        # Load the state in initialize, use it to store data
        # that needs to be accessed across actions
        self._state = self.load_state()

        # get the asset config
        config = self.get_config()

        # Access values in asset config by the name
        # Required values can be accessed directly
        self._base_url = 'https://cloud.malwarebytes.com'
        self.account_id = config['accountid']
        self.client_id = config['clientid']
        self.client_secret = config['clientsecret']
        self.client_scope = ["partner", "a{}".format(self.account_id)]
        self.HEADER = {"x-mwb-clientid": self.client_id, "x-mwb-accountid": self.account_id}

        return phantom.APP_SUCCESS

    def finalize(self):

        # Save the state, this data is saved across actions and app upgrades
        self.save_state(self._state)
        return phantom.APP_SUCCESS


if __name__ == '__main__':

    import pudb
    import argparse

    pudb.set_trace()

    argparser = argparse.ArgumentParser()

    argparser.add_argument('input_test_json', help='Input Test JSON file')
    argparser.add_argument('-u', '--username', help='username', required=False)
    argparser.add_argument('-p', '--password', help='password', required=False)

    args = argparser.parse_args()
    session_id = None

    username = args.username
    password = args.password

    if (username is not None and password is None):

        # User specified a username but not a password, so ask
        import getpass
        password = getpass.getpass("Password: ")

    if (username and password):
        login_url = BaseConnector._get_phantom_base_url() + "login"
        try:
            print ("Accessing the Login page")
            r = requests.get(login_url, verify=False)
            csrftoken = r.cookies['csrftoken']

            data = dict()
            data['username'] = username
            data['password'] = password
            data['csrfmiddlewaretoken'] = csrftoken

            headers = dict()
            headers['Cookie'] = 'csrftoken=' + csrftoken
            headers['Referer'] = login_url

            print ("Logging into Platform to get the session id")
            r2 = requests.post(login_url, verify=False, data=data, headers=headers)
            session_id = r2.cookies['sessionid']
        except Exception as e:
            print ("Unable to get session id from the platform. Error: " + str(e))
            exit(1)

    with open(args.input_test_json) as f:
        in_json = f.read()
        in_json = json.loads(in_json)
        print(json.dumps(in_json, indent=4))

        connector = MalwarebytesCloudConnector()
        connector.print_progress_message = True

        if (session_id is not None):
            in_json['user_session_token'] = session_id
            connector._set_csrf_info(csrftoken, headers['Referer'])

        ret_val = connector._handle_action(json.dumps(in_json), None)
        print (json.dumps(json.loads(ret_val), indent=4))

    exit(0)
